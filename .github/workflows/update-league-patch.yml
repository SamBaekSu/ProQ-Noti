name: Update League Patch & Vercel Env

on:
  schedule:
    - cron: '0 3,9,15,21 * * *' # 매일 한국시간 정오부터 6시간 간격 (UTC 기준)
  workflow_dispatch:

jobs:
  update-patch:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo (optional but good practice)
        uses: actions/checkout@v3

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Get latest League patch
        id: latest
        run: |
          PATCH=$(curl -s https://ddragon.leagueoflegends.com/realms/kr.json | jq -r '.v')
          echo "patch=$PATCH" >> $GITHUB_OUTPUT

      - name: Fetch current patch from Vercel env
        id: current
        run: |
          CURRENT=$(curl -s -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
          "https://api.vercel.com/v10/projects/${{ secrets.VERCEL_PROJECT_ID }}/env")

          CURRENT_PATCH=$(echo "$CURRENT" | jq -r '.envs[] | select(.key=="NEXT_PUBLIC_LEAGUE_PATCH") | .value')
          echo "current_patch=$CURRENT_PATCH" >> $GITHUB_OUTPUT

      - name: Check if update is needed
        id: check
        run: |
          echo "Latest: ${{ steps.latest.outputs.patch }}"
          echo "Current: ${{ steps.current.outputs.current_patch }}"
          if [ "${{ steps.latest.outputs.patch }}" != "${{ steps.current.outputs.current_patch }}" ]; then
            echo "need_update=true" >> $GITHUB_OUTPUT
          else
            echo "need_update=false" >> $GITHUB_OUTPUT
          fi

      - name: Upsert NEXT_PUBLIC_LEAGUE_PATCH env var in Vercel
        if: steps.check.outputs.need_update == 'true'
        run: |
          echo "⏳ 패치 업데이트 시도 중..."
          RESPONSE=$(curl -s -X PATCH "https://api.vercel.com/v10/projects/${{ secrets.VERCEL_PROJECT_ID }}/env/NEXT_PUBLIC_LEAGUE_PATCH" \
            -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "value": "${{ steps.latest.outputs.patch }}",
              "target": ["production"]
            }')

          if echo "$RESPONSE" | grep -q '"code":"not_found"'; then
            echo "📦 환경변수가 없어 새로 생성합니다."
            curl -X POST "https://api.vercel.com/v10/projects/${{ secrets.VERCEL_PROJECT_ID }}/env" \
              -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                "key": "NEXT_PUBLIC_LEAGUE_PATCH",
                "value": "${{ steps.latest.outputs.patch }}",
                "target": ["production"],
                "type": "plain"
              }'
          else
            echo "✅ 패치 환경변수 업데이트 완료"
          fi
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Trigger Vercel Deploy
        if: steps.check.outputs.need_update == 'true'
        run: |
          vercel --prod --yes --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
